/*-------1---------*/
/*В функции может быть больше одного оператора return. Главное помнить, что выполнение функции прерывается когда интерпретатор встречает возврат, и весь код после него будет проигнорирован в текущем вызове функции.

Возьмём уже знакомую нам функцию проверки совершеннолетия. Она работает, но здесь есть «лишний» код, то есть тело функции можно оптимизировать. В данном случае подойдёт приём (паттерн) «ранний возврат».

function checkAge(age) {
  let message;

  if (age >= 18) {
    message = 'Вы совершеннолетний человек';
  } else {
    message = 'Вы не совершеннолетний человек';
  }

  return message;
}
Если условие в if выполняется, то есть приводится к true, возвращаем строку 'Вы совершеннолетний человек' и код ниже уже не исполнится.
Если условие в if не выполняется, то есть приводится к false, возвращаем строку 'Вы не совершеннолетний человек'.
Используя паттерн «ранний возврат» и то, что выполнение функции прерывается на операторе return, мы избавляемся от лишней переменной и блока else. То есть этот приём помогает «разгладить» ветвления.*/

function checkAge(age) {
  if (age>=18) { // Дополни эту строку
    return 'Вы совершеннолетний человек';
  }

  return 'Вы не совершеннолетний человек';
}

/*-------2---------*/

function checkPassword(password) {
  const ADMIN_PASSWORD = 'jqueryismyjam';
  // Пиши код ниже этой строки
 
 if (password === ADMIN_PASSWORD) {
    return 'Добро пожаловать!';
  } 
    return 'Доступ запрещен, неверный пароль!';
  }

  // Пиши код выше этой строки

/*-------3---------*/

function checkStorage(available, ordered) {
  // Пиши код ниже этой строки
    if (ordered === 0) {
     return 'В заказе еще нет товаров';}
  if  (ordered > available) {
     return'Слишком большой заказ, на складе недостаточно товаров!';
 } 
    return'Заказ оформлен, с вами свяжется менеджер';
  // Пиши код выше этой строки
}
/*-------4---------*/
/*Массив используется для хранения упорядоченной коллекции элементов. Он объявляется открывающей и закрывающей квадратной скобками [] - литералом массива. Внутри скобок каждый элемент массива разделяется запятой.

const planets = ['Земля', 'Марс', 'Венера'];*/

// Пиши код ниже этой строки
const fruits = ['яблоко', 'слива', 'груша', 'апельсин'];


/*-------5---------*/
/*Для доступа к значению элемента массива применяют синтаксис квадратных скобок массив[индекс]. Между именем переменной массива и квадратными скобками не должно быть пробела.

Внимание
Индексация элементов массива начинается с нуля.

const planets = ['Земля', 'Марс', 'Венера'];
planets[0]; // 'Земля'
planets[2]; // 'Венера'*/

/*Объяви три переменные и присвой каждой из них значение, используя нотацию квадратных скобок.*/

// Стартовый код
const fruits=['яблоко','слива','груша','апельсин'];
// Пиши код ниже этой строки
const firstElement=fruits[0];
const secondElement=fruits[1];
const lastElement=fruits[3];


/*-------6---------*/
/*В отличии от строк, элементы массива можно изменять обратившись к ним по индексу и присвоив другое значение.

const numbers = [1, 2, 3, 4, 5];
numbers[0] = 7;
numbers[2] = 14;
console.log(numbers); // [7, 2, 14, 4, 5];*/

// Стартовый код
const fruits = ['яблоко', 'слива', 'груша', 'апельсин'];
// Пиши код ниже этой строки
fruits[1]='персик';
fruits[3]='банан';

/*-------7---------*/
/*Длина массива, то есть число его элементов, хранится в свойстве length. Это динамическая величина, которая изменяется автоматически при добавлении или удалении элементов.

const planets = ['Земля', 'Марс', 'Венера'];
console.log(planets.length); // 3*/

//Стартовый код
const fruits = ['яблоко', 'персик', 'груша', 'банан'];
// Пиши код ниже этой строки
const fruitsArrayLength=fruits.length;

/*-------8---------*/
/*Чаще всего, мы заранее в коде не знаем какая будет длина массива. 
Для того, чтобы получить значение последнего элемента применяется следующий подход - длина массива всегда на единицу больше, чем индекс последнего элемента. 
Используя формулу длина_массива - 1 можно получить значение последнего элемента массива произвольной длины.

const planets = ['Земля', 'Марс', 'Венера'];
const lastElementIndex = planets.length - 1;
planets[lastElementIndex]; // 'Венера'*/

// Стартовый код
const fruits = ['яблоко', 'персик', 'груша', 'банан'];
// Пиши код ниже этой строки
const lastElementIndex=fruits.length-1;
const lastElement=fruits[lastElementIndex];

/*-------9---------*/
/*Напиши функцию getExtremeElements(array) которая принимает один параметр array - массив элементов произвольной длины.
Функция должна возвращать массив из двух элементов - первого и последнего элемента параметра array.*/

function getExtremeElements(array) {
    // Пиши код ниже этой строки
const lastElementIndex=array.length-1;
return [array[0], array[lastElementIndex]];  
    // Пиши код выше этой строки
}
/*-------10---------*/
/*Метод split(delimeter) позволяет превратить строку в массив, «разбив» его по разделителю delimeter. Если разделитель это пустая строка, то получится массив отдельных символов. Разделителем может быть один или несколько символов.

const name = 'Манго';
console.log(name.split('')); // ['M', 'a', 'н', 'г', 'о']

const message = 'JavaScript это интересно';
console.log(message.split(' ')); // ['JavaScript', 'это', 'интересно']*/

function splitMessage(message, delimeter) {
  let words;
  // Пиши код ниже этой строки
  
 words=message.split(delimeter);
 
   // Пиши код выше этой строки
  return words;
}

/*-------11---------*/


/*-------12---------*/


/*-------13---------*/


/*-------14---------*/


/*-------15---------*/


/*-------16---------*/



/*-------17---------*/


/*-------18---------*/



/*-------19---------*/


/*-------20---------*/


/*-------21---------*/


/*-------22---------*/


/*-------23---------*/


/*-------24---------*/


/*-------25---------*/


/*-------26---------*/


/*-------27---------*/


/*-------28---------*/



/*-------29---------*/


/*-------30---------*/



/*-------31---------*/


/*-------32---------*/


/*-------33---------*/



/*-------34---------*/



/*-------35---------*/



/*-------36---------*/
